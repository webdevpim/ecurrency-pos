#! /usr/bin/env perl
use warnings;
use strict;

use Getopt::Long qw(:config bundling no_ignore_case no_auto_abbrev require_order);
use POSIX;
use QBitcoin::Const;
use QBitcoin::Log;
use QBitcoin::WarnWrapper;
use QBitcoin::Config qw($config read_config);
use QBitcoin::ORM;
use QBitcoin::Transaction;
use QBitcoin::Block;
use QBitcoin::Network;
use QBitcoin::Revalidate qw(revalidate);
use Bitcoin::Protocol;

sub main {
    my ( $help, @peer_hosts, @fallback_peers, @btc_hosts, $conffile );

    # Prettify ps title (remove "perl" from the command line)
    $0 = join(" ", $0 =~ s|.*/||r, @ARGV);

    my %opts;
    unless (GetOptions(
        'help|h|?'        => \$help,
        'peer|p=s'        => \@peer_hosts,
        'fallback-peer=s' => \@fallback_peers,
        'ecrnode|E=s'     => \@btc_hosts,
        'verbose|v'       => \$opts{verbose},
        'debug|d'         => \$opts{debug},
        'bind|b=s'        => \$opts{bind},
        'daemonize|D'     => \$opts{daemonize},
        'port|P=s'        => \$opts{port},
        'rpc|J=s'         => \$opts{rpc},
        'rpc-port=s'      => \$opts{rpc_port},
        'rest|R=s'        => \$opts{rest},
        'rest-port=s'     => \$opts{rest_port},
        'genesis|G'       => \$opts{genesis},
        'generate|g'      => \$opts{generate},
        'fake-coinbase'   => \$opts{fake_coinbase},
        'produce'         => \$opts{produce},
        'database=s'      => \$opts{database},
        'testnet|t'       => \$opts{testnet},
        'dbi=s'           => \$opts{dbi},
        'log=s'           => \$opts{log},
        'loglevel=s'      => \$opts{loglevel},
        'revalidate'      => \$opts{revalidate},
        'config|f=s'      => \$conffile,
    )) {
        select STDERR;
        usage();
        return 1;
    }
    if ($help) {
        usage();
        return 0;
    }

    read_config($conffile);

    # command-line options override config values
    $config->set($_ => $opts{$_}) foreach grep { defined $opts{$_} } keys %opts;
    $config->set(peer    => @peer_hosts) if @peer_hosts;
    $config->set(ecrnode => @btc_hosts)  if @btc_hosts;
    $config->set(ecr_testnet => 1) if $opts{testnet} && !defined $config->{ecr_testnet};
    $config->set(fallback_peer => @fallback_peers) if @fallback_peers;

    if ($config->{daemonize}) {
        if ($opts{verbose}) {
            print STDERR "Options -D (daemonize) and -v (verbose) are mutually exclusive\n";
            return 1;
        }
        if ($opts{debug} && $config->{loglevel}) {
            print STDERR "Options -D (daemonize) and -d (debug) are mutually exclusive\n";
            return 1;
        }
        $config->set(verbose => 0);
        daemonize();
    }

    QBitcoin::Log->init();

    if ($opts{revalidate}) {
        revalidate();
    }

    return QBitcoin::Network->main_loop();
}

sub daemonize {
    POSIX::setsid()
        or die "setsid: $!";
    my $pid = fork() // die $!;
    exit(0) if $pid;
    chdir "/";
    # umask 0;
    foreach my $fd (0 .. (POSIX::sysconf(&POSIX::_SC_OPEN_MAX) || 1024)) {
        POSIX::close $fd;
    }
    open(STDIN,  "<",  "/dev/null");
    open(STDOUT, ">",  "/dev/null");
    open(STDERR, ">&", \*STDOUT);
}

sub usage {
    print "QEcurrency Core Daemon version " . VERSION . "\n";
    print "Usage:  qecurrencyd [options]\n";
    print "Options:\n";
    print "   -h, -? --help               - print this help message and exit,\n";
    print "   -v, --verbose               - output logs to stdout,\n";
    print "   -d, --debug                 - output debug info,\n";
    print "   -f, --config <file>         - config file, 'key = value' format (default " . CONFIG_DIR . "/" . CONFIG_NAME . "),\n";
    print "   -p, --peer <host[:port]>    - connect to peer <host> and <port> (default port " . PORT . "),\n";
    if (UPGRADE_POW) {
        print "   -E, --ecrnode <host[:port]> - connect to ecr node <host>:<port> (default port " . ECR_PORT . "),\n";
    }
    print "   -b, --bind <addr[:port]>    - bind to local <address> and <port> (default " . BIND_ADDR . ":" . PORT . "),\n";
    print "   -J, --rpc <addr[:port]>     - respond to JSON RPC API on <address> and <port> (default " . RPC_ADDR . ":" . RPC_PORT . "),\n";
    print "   -R, --rest <addr[:port]>    - respond to Esplora RESTful API on <address> and <port> (disabled by default, default port " . REST_PORT . "),\n";
    print "   -D, --daemonize             - daemonize,\n";
    print "   -g, --generate              - generate blocks (enabled by default if there are any coins on balance),\n";
    print "   -G, --genesis               - run as genesis node, do not need to synchronize with other nodes for authoritative answers,\n";
    print "   -t, --testnet               - run for testnet, by default mainnet,\n";
    print "   --log <file>                - write log to <file>, 'syslog' for syslog (default),\n";
    print "   --loglevel <prio>           - set log level: 'debug', 'info' (default), 'notice', 'warning', 'err', 'crit'.\n";
}

exit main();
